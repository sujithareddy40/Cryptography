#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char encrypt(char plain, int key) {
    if (plain >= 'a' && plain <= 'z') {
        return ((plain - 'a' + key) % 26) + 'a';
    } else if (plain >= 'A' && plain <= 'Z') {
        return ((plain - 'A' + key) % 26) + 'A';
    } else {
        return plain;
    }
}
void vigenereEncrypt(const char *plaintext, const char *key, char *ciphertext) {
    int keyLength = strlen(key);
    int textLength = strlen(plaintext);
    for (int i = 0; i < textLength; i++) {
        int currentKey = key[i % keyLength];
        ciphertext[i] = encrypt(plaintext[i], currentKey);
    }
    ciphertext[textLength] = '\0';
}
int main() {
    const char *key = "BAC";
    const char *plaintext = "HelloWorld";
    int textLength = strlen(plaintext);
    char *ciphertext = (char *)malloc((textLength + 1) * sizeof(char));
    if (ciphertext == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return 1;
    }
    vigenereEncrypt(plaintext, key, ciphertext);
    printf("Plaintext: %s\n", plaintext);
    printf("Key: %s\n", key);
    printf("Ciphertext: %s\n", ciphertext);
    free(ciphertext);
    return 0;
}
